// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/app (interfaces: ConversationApp)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/app/mock_conversation_app.go -package=mocks backend/internal/app ConversationApp
//

// Package mocks is a generated GoMock package.
package mocks

import (
	app "backend/internal/app"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConversationApp is a mock of ConversationApp interface.
type MockConversationApp struct {
	ctrl     *gomock.Controller
	recorder *MockConversationAppMockRecorder
}

// MockConversationAppMockRecorder is the mock recorder for MockConversationApp.
type MockConversationAppMockRecorder struct {
	mock *MockConversationApp
}

// NewMockConversationApp creates a new mock instance.
func NewMockConversationApp(ctrl *gomock.Controller) *MockConversationApp {
	mock := &MockConversationApp{ctrl: ctrl}
	mock.recorder = &MockConversationAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationApp) EXPECT() *MockConversationAppMockRecorder {
	return m.recorder
}

// Converse mocks base method.
func (m *MockConversationApp) Converse(arg0 *app.ConverseRequest) (*app.ConverseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Converse", arg0)
	ret0, _ := ret[0].(*app.ConverseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Converse indicates an expected call of Converse.
func (mr *MockConversationAppMockRecorder) Converse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Converse", reflect.TypeOf((*MockConversationApp)(nil).Converse), arg0)
}

// EndConversation mocks base method.
func (m *MockConversationApp) EndConversation(arg0 *app.EndConversationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndConversation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndConversation indicates an expected call of EndConversation.
func (mr *MockConversationAppMockRecorder) EndConversation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndConversation", reflect.TypeOf((*MockConversationApp)(nil).EndConversation), arg0)
}
