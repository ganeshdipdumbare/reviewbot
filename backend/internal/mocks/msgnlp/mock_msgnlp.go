// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/infra/msgnlp (interfaces: MessageIntentService)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/msgnlp/mock_msgnlp.go -package=msgnlp . MessageIntentService
//

// Package msgnlp is a generated GoMock package.
package msgnlp

import (
	msgnlp "backend/internal/infra/msgnlp"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageIntentService is a mock of MessageIntentService interface.
type MockMessageIntentService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageIntentServiceMockRecorder
}

// MockMessageIntentServiceMockRecorder is the mock recorder for MockMessageIntentService.
type MockMessageIntentServiceMockRecorder struct {
	mock *MockMessageIntentService
}

// NewMockMessageIntentService creates a new mock instance.
func NewMockMessageIntentService(ctrl *gomock.Controller) *MockMessageIntentService {
	mock := &MockMessageIntentService{ctrl: ctrl}
	mock.recorder = &MockMessageIntentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageIntentService) EXPECT() *MockMessageIntentServiceMockRecorder {
	return m.recorder
}

// PredictIntent mocks base method.
func (m *MockMessageIntentService) PredictIntent(arg0 *msgnlp.MessageIntentRequest) (*msgnlp.MessageIntentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PredictIntent", arg0)
	ret0, _ := ret[0].(*msgnlp.MessageIntentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictIntent indicates an expected call of PredictIntent.
func (mr *MockMessageIntentServiceMockRecorder) PredictIntent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictIntent", reflect.TypeOf((*MockMessageIntentService)(nil).PredictIntent), arg0)
}
